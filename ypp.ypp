%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR			/* skalars: symbol number 'string' */
%token <o> LP RP LQ RQ LC RC	/* brackets: () [] {} */
%token <o> EQ AT TILD			/* operators: = @ ~ */
%token <o> ADD SUB MUL DIV POW	/* operators: + - * / ^ */
%type <o> ex scalar list		/* [li st] */

%right EQ
%left ADD SUB
%left MUL DIV
%left POW
%left AT
%left TILD

%%
REPL : | REPL ex	{
					cout << $2->dump(); 
					cout << "\n---------------";
					cout << $2->eval()->dump(); 
					cout << "\n===============\n";
} ;
scalar : SYM | NUM | STR ;
ex : scalar
	| LQ list RQ	{ $$=$2; }
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex SUB ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex		{ $$=$2; $$->push($1); $$->push($3); }
;
list :				{ $$=new List(); }
	| list ex		{ $$=$1; $$->push($2); }
;
%%
